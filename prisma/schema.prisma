generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  PESERTA
  MAMET
  MENTOR
  KASUH
  ADMIN
}

// Types
type Section {
  title       String
  description String?
}

type Attachment {
  title String
  link  String
}

// Models
model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  nim          String         @unique
  email        String
  password     String
  fullName     String
  shortName    String?
  instagram    String?
  imageURL     String?
  score        Int            @default(0)
  role         Role           @default(PESERTA)
  kelompok     String?
  evalUser     EvalDay[]
  submisiTugas SubmisiTugas[]
  UserKasuh    UserKasuh?
  UserDesuh    UserDesuh?
  CareerPath   CareerPath[]   @relation(fields: [careerPathId], references: [id])
  careerPathId String[]       @db.ObjectId
}

model UserKasuh {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique @db.ObjectId
  line              String?
  deskripsi         String?
  kuota             Int                @default(0)
  pendaftarSekarang Int                @default(0)
  PendaftaranKasuh  PendaftaranKasuh[]
}

model UserDesuh {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @db.ObjectId
  PendaftaranKasuh PendaftaranKasuh[]
}

model PendaftaranKasuh {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  kasuh    UserKasuh @relation(fields: [kasuhId], references: [id])
  kasuhId  String    @db.ObjectId
  desuh    UserDesuh @relation(fields: [desuhId], references: [id])
  desuhId  String    @db.ObjectId
  alasan   String
  approved Boolean   @default(false)
  rank     Int
}

model Tugas {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  day          Day            @relation(fields: [dayId], references: [id])
  dayId        String         @db.ObjectId
  description  String?
  startTime    DateTime
  endTime      DateTime
  attachments  Attachment[]
  submisiTugas SubmisiTugas[]
}

model SubmisiTugas {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  tugas   Tugas  @relation(fields: [tugasId], references: [id])
  tugasId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  link    String
}

model Materi {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  releaseDate DateTime
  sections    Section[]
  attachments Attachment[]
}

model Day {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  number      Int       @unique
  description String?
  date        DateTime
  evalDay     EvalDay[]
  tugas       Tugas[]
}

model EvalDay {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  story      String
  reflection String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @db.ObjectId
  day        Day    @relation(fields: [dayId], references: [id])
  dayId      String @db.ObjectId
}

model CareerPath {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  kuota     Int
  pendaftar Int      @default(0)
  users     User[]   @relation(fields: [userId], references: [id])
  userId    String[] @db.ObjectId
}
